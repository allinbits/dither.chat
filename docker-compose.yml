services:
  # ================================
  # Database Services
  # ================================
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: default
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "default"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # ================================
  # RabbitMQ Service (event system)
  # ================================
  rabbitmq:
    image: rabbitmq:latest
    build: ./packages/rabbit-mq
    container_name: rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq

  # ================================
  # REST Services
  # ================================
  api-main:
    container_name: "api-main"
    build: ./packages/api-main
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PG_URI: "postgresql://default:password@postgres:5432/postgres"
    ports:
      - 3000:3000
      - 3001:3001
    healthcheck:
      test: "curl http://localhost:3001/v1/health && curl http://localhost:3000/v1/health  || exit 1"
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s

  # ================================
  # Event Consuming Services
  # ================================
  post-service:
    container_name: "post-service"
    build: ./packages/post-service
    depends_on:
      api-main:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_ROOT: "http://api-main:3001/v1"
    restart: always
    command: ["pnpm", "start"]
    
  reply-service:
    container_name: "reply-service"
    build: ./packages/reply-service
    depends_on:
      api-main:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_ROOT: "http://api-main:3001/v1"
    restart: always
    command: ["pnpm", "start"]

  like-service:
    container_name: "like-service"
    build: ./packages/like-service
    depends_on:
      api-main:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_ROOT: "http://api-main:3001/v1"
    restart: always
    command: ["pnpm", "start"]

  dislike-service:
    container_name: "dislike-service"
    build: ./packages/dislike-service
    depends_on:
      api-main:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_ROOT: "http://api-main:3001/v1"
    restart: always
    command: ["pnpm", "start"]

  follow-service:
    container_name: "follow-service"
    build: ./packages/follow-service
    depends_on:
      api-main:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_ROOT: "http://api-main:3001/v1"
    restart: always
    command: ["pnpm", "start"]
  unfollow-service:
    container_name: "unfollow-service"
    build: ./packages/unfollow-service
    depends_on:
      api-main:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_ROOT: "http://api-main:3001/v1"
    restart: always
    command: ["pnpm", "start"]
  flag-service:
    container_name: "flag-service"
    build: ./packages/flag-service
    depends_on:
      api-main:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_ROOT: "http://api-main:3001/v1"
    restart: always
    command: ["pnpm", "start"]
  post-remove-service:
    container_name: "post-remove-service"
    build: ./packages/post-remove-service
    depends_on:
      api-main:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_ROOT: "http://api-main:3001/v1"
    restart: always
    command: ["pnpm", "start"]
  # ================================
  # ChronoSync Services (Readers)
  # ================================
  reader-main:
    container_name: "reader-main"
    build: ./packages/reader-main
    restart: always
    command: ["pnpm", "start"]
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RABBITMQ_ENDPOINT: "amqp://guest:guest@rabbitmq:5672"
      RABBITMQ_EXCHANGE: "dither"
      API_URLS: "https://atomone-devnet-1-api.allinbits.services"
      START_BLOCK: "2272226"
      BATCH_SIZE: 50
      MEMO_PREFIX: "dither."
      RECEIVER: "atone1uq6zjslvsa29cy6uu75y8txnl52mw06j6fzlep"
      # PG_URI: postgres://username:password@postgres-feed:5432/feed
      # LOG: process.env.LOG === 'true' ? true : false,

  # ================================
  # Gateway Service
  # ================================
  # nginx:
  #   image: nginx:latest
  #   volumes:
  #     - ./packages/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - postgres
  #     - api-main

volumes:
  rabbitmq-lib:
    driver: local
  rabbitmq-log:
    driver: local
